CDF<-function(theta,x){1-(1+theta[2]*x)^(-theta[1])}  ##theta is c(alpha,beta) for GDP
### This code is for the distritbuion characteristic
PDF<-function(theta,x){theta[1]*theta[2]*(1+theta[2]*x)^(-theta[1]-1)}
CDF<-function(theta,x){1-(1+theta[2]*x)^(-theta[1])}  ##theta is c(alpha,beta) for GDP
ST<-function(theta){(1+theta[2]*t)^(-theta[1])}
HT<-function(theta){theta[1]*theta[2]*(1+theta[2]*t)^(-1)}   ###### t is parameter
### generate cencoring data
censoring<-function(theta,R){
n<-length(R)
W<-runif(n)
V<-rep(0,n)
U<-rep(0,n)
for (i in 1:n)
{
V[i]<-W[i]^(1/(i+sum(R[(n-i+1):n])))
}
for (i in 1:n){
U[i]<-1-prod(V[n:(n-i+1)])
}
return(1/theta[2]*(1-U)^(-1/theta[1])-1/theta[2])
}
### Log-likelihood for cencoring data
log.lik1<-function(theta,x,R){
n<-length(x)
N<-n+sum(R)
c0<-rep(N,n)
c<-prod(c0)
ln<-log(c)+n*log(theta[1])+n*log(theta[2])-sum((theta[1]*R+theta[1]+1)*log(1+theta[2]*x))
return(-ln)
}
source('BasicFunction.R')
library(numDeriv)
mleEstimate<-function(R){
simResult<-matrix(NA,sim,16)
colnames(simResult)<-c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
meanResult<-matrix(NA,1,16)
colnames(meanResult)<-c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
for (i in 1:sim){
n<-length(R)
data<-censoring(c(alpha,beta),R)
res1<-optim(c(1,1),log.lik1,method="L-BFGS-B",lower=c(0.1,0.1),
x=data,R=R,hessian=T,control=list(trace=F,maxit=1000))
simResult[i,1]<-res1$par[1]
simResult[i,3]<-2*qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[1,1])
simResult[i,4]<-(res1$par[1]-qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[1,1])<alpha
)&(alpha<res1$par[1]+qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[1,1]))
simResult[i,5]<-res1$par[2]
simResult[i,7]<-2*qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[2,2])
simResult[i,8]<-(res1$par[2]-qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[2,2])<beta
)&(beta<res1$par[2]+qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[2,2]))
simResult[i,9]<-ST(res1$par)
Varhat1<-(t(grad(ST,res1$par))%*%solve(res1$hessian)%*%grad(ST,res1$par))[1,1]
simResult[i,11]<-2*qnorm((1+conf.level)/2)*sqrt(Varhat1)
simResult[i,12]<-(ST(res1$par)-0.5*simResult[i,11]<ST(c(alpha,beta)))&(ST(c(alpha,beta))<ST(res1$par)+0.5*simResult[i,11])
simResult[i,13]<-HT(res1$par)
Varhat2<-(t(grad(HT, res1$par))%*%solve(res1$hessian)%*%grad(HT, res1$par))[1,1]
simResult[i,15]<-2*qnorm((1+conf.level)/2)*sqrt(Varhat2)
simResult[i,16]<-(HT(res1$par)-0.5*simResult[i,15]<HT(c(alpha,beta)))&(HT(c(alpha,beta))<HT(res1$par)+simResult[i,15])
}
mseResult[,1]<-mean(simResult[,1])
mseResult[,2]<-sum((simResult[,1]-mean(simResult[,1]))^2)/sim
mseResult[,3]<-mean(simResult[,3])
mseResult[,4]<-mean(simResult[,4])
mseResult[,5]<-mean(simResult[,5])
mseResult[,6]<-sum((simResult[,5]-mean(simResult[,5]))^2)/sim
mseResult[,7]<-mean(simResult[,7])
mseResult[,8]<-mean(simResult[,8])
mseResult[,9]<-mean(simResult[,9])
mseResult[,10]<-sum((simResult[,9]-mean(simResult[,9]))^2)/sim
mseResult[,11]<-mean(simResult[,11])
mseResult[,12]<-mean(simResult[,12])
mseResult[,13]<-mean(simResult[,13])
mseResult[,14]<-sum((simResult[,13]-mean(simResult[,13]))^2)/sim
mseResult[,15]<-mean(simResult[,15])
mseResult[,16]<-mean(simResult[,16])
return(mseResult)
}
### This code is for bootstrap method
bootResult<-data.frame(row.names = c('R1','R2','R3'),
colnames = c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP"))
bootResult<-data.frame(rownames = c('R1','R2','R3'),
colnames = c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP"))
bootResult<-data.frame(rownames = c('R1','R2','R3'))
View(bootResult)
bootResult<-matrix(data=NA,3,16)
rownames(bootResult)<-c('R1','R2','R3')
bootstrap<-function(R){
Bboot<-1000
output<-matrix(NA,3,16)
boot.p<-matrix(NA,Bboot,4)
colnames(output)<-c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
rownames(output)<-c("R1","R2","R3")
output_R1 = matrix(NA,sim,16)
output_R2 = matrix(NA,sim,16)
output_R3 = matrix(NA,sim,16)
colnames(output_R1)<-c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
colnames(output_R2)<-c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
colnames(output_R3)<-c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
for (k in 1:sim){
for (j in 1:nrow(scheme)){
R<-scheme[j,]
n<-length(R)
data<-censoring(c(alpha,beta),R)
res1<-optim(c(1,1),log.lik1,method="L-BFGS-B",lower=c(0.1,0.1),x=data,R=R,hessian=T,control=list(trace=F,maxit=1000))
boost.res<-res1
for (i in 1:Bboot){
bootsample<-censoring(boost.res$par,R)
boot.res<-optim(c(1,1),log.lik1,method="L-BFGS-B",lower=c(0.1,0.1),x=bootsample,R=R,hessian=T,control=list(trace=F,maxit=1000))
boot.p[i,1]<-boot.res$par[1]
boot.p[i,2]<-boot.res$par[2]
boot.p[i,3]<-ST(boot.res$par)
boot.p[i,4]<-HT(boot.res$par)
}
output[j,1]<-mean(boot.p[,1])
output[j,2]<-sum((boot.p[,1]-alpha)^2)/Bboot
output[j,3]<-diff(quantile(boot.p[,1],c(0.025,0.975)))
output[j,4]<-(alpha>quantile(boot.p[,1],0.025))&(alpha<quantile(boot.p[,1],0.975))
output[j,5]<-mean(boot.p[,2])
output[j,6]<-sum((boot.p[,2]-beta)^2)/Bboot
output[j,7]<-diff(quantile(boot.p[,2],c(0.025,0.975)))
output[j,8]<-(beta>quantile(boot.p[,2],0.025))&(beta<quantile(boot.p[,2],0.975))
output[j,9]<-mean(boot.p[,3])
output[j,10]<-sum((boot.p[,3]-ST(c(alpha,beta)))^2)/Bboot
output[j,11]<-diff(quantile(boot.p[,3],c(0.025,0.975)))
output[j,12]<-(ST(c(alpha,beta))>quantile(boot.p[,3],0.025))&(ST(c(alpha,beta))<quantile(boot.p[,3],0.975))
output[j,13]<-mean(boot.p[,4])
output[j,14]<-sum((boot.p[,4]-HT(c(alpha,beta)))^2)/Bboot
output[j,15]<-diff(quantile(boot.p[,4],c(0.025,0.975)))
output[j,16]<-(HT(c(alpha,beta))>quantile(boot.p[,4],0.025))&(HT(c(alpha,beta))<quantile(boot.p[,4],0.975))
}
output_R1[k,]<-output[1,]
output_R2[k,]<-output[2,]
output_R3[k,]<-output[3,]
}
R1<-data.frame(output_R1)
R2<-data.frame(output_R2)
R3<-data.frame(output_R3)
bootResult<-matrix(data=NA,3,16)
colnames(bootResult)<- c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
rownames(bootResult)<-c('R1','R2','R3')
bootResult<-data.frame(bootResult)
bootResult[1,]<-apply(R1[R1$beta.MSE<1,], 2, mean)
bootResult[2,]<-apply(R2[R2$beta.MSE<1,], 2, mean)
bootResult[3,]<-apply(R3[R3$beta.MSE<1,], 2, mean)
return(bootResult)
}
bayes<-function(R){
k1=k2=h1=h2=0.001
M=1000 ##for ARMS size
output_arms<-matrix(NA,M,16)
colnames(output_arms)<-c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
paraFuc<-function(BETA){BETA^(n+k2-1)*exp(-sum(log(1+BETA*data))-h2*BETA)}
indFunc<-function(BETA){BETA>0}
n<-length(R)
data<-censoring(c(alpha,beta),R)
ARMS<-matrix(NA,M,4)
for (i in 1:sim){
ARMS[,2]<-arms(rnorm(1),paraFuc,indFunc,M)
for (k in 1:M){
ARMS[k,1]<-rgamma(1,n+k1,sum((R+1)*log(1+ARMS[k,2]*data))+h1)
ARMS[k,3]<-ST(c(ARMS[k,1],ARMS[k,2]))
ARMS[k,4]<-HT(c(ARMS[k,1],ARMS[k,2]))
}
output_arms[i,1]<-mean(ARMS[,1])
output_arms[i,2]<-sum((ARMS[,1]-alpha)^2)/M
output_arms[i,3]<-diff(quantile(ARMS[,1],c(0.025,0.975)))
output_arms[i,4]<-(alpha>quantile(ARMS[,1],0.025))&(alpha<quantile(ARMS[,1],0.975))
output_arms[i,5]<-mean(ARMS[,2])
output_arms[i,6]<-sum((ARMS[,2]-beta)^2)/M
output_arms[i,7]<-diff(quantile(ARMS[,2],c(0.025,0.975)))
output_arms[i,8]<-(beta>quantile(ARMS[,2],0.025))&(beta<quantile(ARMS[,2],0.975))
output_arms[i,9]<-mean(ARMS[,3])
output_arms[i,10]<-sum((ARMS[,3]-ST(c(alpha,beta)))^2)/M
output_arms[i,11]<-diff(quantile(ARMS[,3],c(0.025,0.975)))
output_arms[i,12]<-(ST(c(alpha,beta))>quantile(ARMS[,3],0.025))&(ST(c(alpha,beta))<quantile(ARMS[,3],0.975))
output_arms[i,13]<-mean(ARMS[,4])
output_arms[i,14]<-sum((ARMS[,4]-HT(c(alpha,beta)))^2)/M
output_arms[i,15]<-diff(quantile(ARMS[,4],c(0.025,0.975)))
output_arms[i,16]<-(HT(c(alpha,beta))>quantile(ARMS[,4],0.025))&(HT(c(alpha,beta))<quantile(ARMS[,4],0.975))
}
output_arms = data.frame(output_arms)
bayesResult<-apply(output_arms[output_arms$beta.MSE<1,], 2, mean)
return(bayesResult)
}
source('BasicFunction.R')
source('mle.R')
source('bootstrap.R')
source('bayes.R')
R1<-c(20,rep(0,29))
R2<-c(rep(0,10),rep(2,10),rep(0,10))
R3<-c(rep(0,29),20)
scheme<-rbind(R1,R2,R3)   #### 有效样本大小m相同的删失模式可以合并成矩阵进行循环
alpha<-0.3
beta<-1
sim<-100
conf.level<-0.95
mle<-function(R){
simResult<-matrix(NA,sim,16)
colnames(simResult)<-c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
meanResult<-matrix(NA,1,16)
colnames(meanResult)<-c("alpha.AV","alpha.MSE","alpha.AL","alpha.CP",
"beta.AV","beta.MSE","beta.AL","beta.CP",
"ST.AV","ST.MSE","ST.AL","ST.CP",
"HT.AV","HT.MSE","HT.AL","HT.CP")
for (i in 1:sim){
n<-length(R)
data<-censoring(c(alpha,beta),R)
res1<-optim(c(1,1),log.lik1,method="L-BFGS-B",lower=c(0.1,0.1),
x=data,R=R,hessian=T,control=list(trace=F,maxit=1000))
simResult[i,1]<-res1$par[1]
simResult[i,3]<-2*qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[1,1])
simResult[i,4]<-(res1$par[1]-qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[1,1])<alpha
)&(alpha<res1$par[1]+qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[1,1]))
simResult[i,5]<-res1$par[2]
simResult[i,7]<-2*qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[2,2])
simResult[i,8]<-(res1$par[2]-qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[2,2])<beta
)&(beta<res1$par[2]+qnorm((1+conf.level)/2)*sqrt(solve(res1$hessian)[2,2]))
simResult[i,9]<-ST(res1$par)
Varhat1<-(t(grad(ST,res1$par))%*%solve(res1$hessian)%*%grad(ST,res1$par))[1,1]
simResult[i,11]<-2*qnorm((1+conf.level)/2)*sqrt(Varhat1)
simResult[i,12]<-(ST(res1$par)-0.5*simResult[i,11]<ST(c(alpha,beta)))&(ST(c(alpha,beta))<ST(res1$par)+0.5*simResult[i,11])
simResult[i,13]<-HT(res1$par)
Varhat2<-(t(grad(HT, res1$par))%*%solve(res1$hessian)%*%grad(HT, res1$par))[1,1]
simResult[i,15]<-2*qnorm((1+conf.level)/2)*sqrt(Varhat2)
simResult[i,16]<-(HT(res1$par)-0.5*simResult[i,15]<HT(c(alpha,beta)))&(HT(c(alpha,beta))<HT(res1$par)+simResult[i,15])
}
mseResult[,1]<-mean(simResult[,1])
mseResult[,2]<-sum((simResult[,1]-mean(simResult[,1]))^2)/sim
mseResult[,3]<-mean(simResult[,3])
mseResult[,4]<-mean(simResult[,4])
mseResult[,5]<-mean(simResult[,5])
mseResult[,6]<-sum((simResult[,5]-mean(simResult[,5]))^2)/sim
mseResult[,7]<-mean(simResult[,7])
mseResult[,8]<-mean(simResult[,8])
mseResult[,9]<-mean(simResult[,9])
mseResult[,10]<-sum((simResult[,9]-mean(simResult[,9]))^2)/sim
mseResult[,11]<-mean(simResult[,11])
mseResult[,12]<-mean(simResult[,12])
mseResult[,13]<-mean(simResult[,13])
mseResult[,14]<-sum((simResult[,13]-mean(simResult[,13]))^2)/sim
mseResult[,15]<-mean(simResult[,15])
mseResult[,16]<-mean(simResult[,16])
return(mseResult)
}
source('BasicFunction.R')
source('mle.R')
source('bootstrap.R')
source('bayes.R')
### Set parameters
R1<-c(20,rep(0,29))
R2<-c(rep(0,10),rep(2,10),rep(0,10))
R3<-c(rep(0,29),20)
scheme<-rbind(R1,R2,R3)   #### 有效样本大小m相同的删失模式可以合并成矩阵进行循环
alpha<-0.3
beta<-1
sim<-100
conf.level<-0.95
mle(R = R2)
t=1.5
########simluation
mle(R = R2)
########simluation
mle(R = R2)
source('mle.R')
########simluation
mle(R = R2)
source('mle.R')
########simluation
mle(R = R2)
bootstrap(R = R2)
source('bootstrap.R')
bootstrap()
bayes(R2)
source('bayes.R')
bayes(R2)
source('bayes.R')
bayes(R2)
source('bayes.R')
bayes(R2)
